/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.FoodProcess;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.FoodProcess.PurchasingWorkRequest;
import Business.WorkQueue.FoodServer.MarketPurchasingWorkRequest;
import Business.WorkQueue.FoodServer.RestaurantPurchasingWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author apple
 */
public class SalesStaffWorkArea extends javax.swing.JPanel {
    
    JPanel userProcessContainer;
    EcoSystem system;
    UserAccount account;
    Enterprise enterprise;
    public static Organization saleorganization;

    /**
     * Creates new form SalesStuffWorkArea
     */
    public SalesStaffWorkArea(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system = business;
        this.account = account;
        this.enterprise = enterprise;
        this.saleorganization = organization;
        System.out.println(account);
        System.out.println(enterprise);
        populateTable();
        populateAdvice();
    }

    /*
    public void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) tblOrderList.getModel();
        dtm.setRowCount(0);
        Object row[] = new Object[4];
        row[0] = "Egg";
        row[1] = "20";
        row[2] = "ABC";
        row[3] = "1-12-2017";
        dtm.addRow(row);

    }*/
    public void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) tblOrderList.getModel();
        dtm.setRowCount(0);
        int rowCount = dtm.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            dtm.removeRow(i);
        }
        
        for (WorkRequest request : saleorganization.getWorkQueue().getWorkRequestList()) {
            Object[] row = new Object[6];
            if (request instanceof RestaurantPurchasingWorkRequest) {
                
                row[0] = request;
                row[1] = ((RestaurantPurchasingWorkRequest) request).getDate();
                row[2] = ((RestaurantPurchasingWorkRequest) request).getProcessorName();
                row[3] = ((RestaurantPurchasingWorkRequest) request).getQuantity();
                String result = ((RestaurantPurchasingWorkRequest) request).getStatus();
                row[4] = result == null ? "Waiting" : result;
                row[5] = "Restaurant";
                
                dtm.addRow(row);                
            }
            
            if (request instanceof MarketPurchasingWorkRequest) {
                row[0] = request;
                row[1] = ((MarketPurchasingWorkRequest) request).getDate();
                row[2] = ((MarketPurchasingWorkRequest) request).getProcessorName();
                row[3] = ((MarketPurchasingWorkRequest) request).getQuantity();
                String result = ((MarketPurchasingWorkRequest) request).getStatus();
                row[4] = result == null ? "Waiting" : result;
                row[5] = "Market";
                dtm.addRow(row);                
            }
        }
    }
    
    public void populateAdvice() {
        if (saleorganization.getWorkQueue().getWorkRequestList().size() != 0) {
            int a = saleorganization.getWorkQueue().getWorkRequestList().size();
            WorkRequest req = saleorganization.getWorkQueue().getWorkRequestList().get(a - 1);
            lbAdvie1.setText(String.valueOf(req.getMessage()));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblOrderList = new javax.swing.JTable();
        btnReject = new javax.swing.JButton();
        btnAccept = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        lbAdvie1 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtDate = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 255, 204));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("Processor's Sales Staff");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(289, 36, -1, -1));

        tblOrderList.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tblOrderList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "Order Date", "Processor Name", "Quantity", "Status", "OrderType"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblOrderList);
        if (tblOrderList.getColumnModel().getColumnCount() > 0) {
            tblOrderList.getColumnModel().getColumn(0).setResizable(false);
            tblOrderList.getColumnModel().getColumn(1).setResizable(false);
            tblOrderList.getColumnModel().getColumn(2).setResizable(false);
            tblOrderList.getColumnModel().getColumn(3).setResizable(false);
            tblOrderList.getColumnModel().getColumn(4).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 156, 648, 320));

        btnReject.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnReject.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FeedbackAnalytics/Picture/cros.png"))); // NOI18N
        btnReject.setText("Reject the Order");
        btnReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectActionPerformed(evt);
            }
        });
        add(btnReject, new org.netbeans.lib.awtextra.AbsoluteConstraints(875, 400, 241, 76));

        btnAccept.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnAccept.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FeedbackAnalytics/Picture/tick.png"))); // NOI18N
        btnAccept.setText("Accept the Order");
        btnAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptActionPerformed(evt);
            }
        });
        add(btnAccept, new org.netbeans.lib.awtextra.AbsoluteConstraints(877, 274, 241, -1));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 153));
        jLabel2.setText("Manager Advise:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 526, -1, -1));

        lbAdvie1.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        lbAdvie1.setForeground(new java.awt.Color(255, 0, 153));
        lbAdvie1.setText("jLabel3");
        add(lbAdvie1, new org.netbeans.lib.awtextra.AbsoluteConstraints(409, 526, -1, -1));

        btnBack.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FeedbackAnalytics/Picture/back.png"))); // NOI18N
        btnBack.setText(" Back");
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 156, 167, -1));

        jLabel3.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel3.setText("Approve Date:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(877, 156, -1, -1));

        txtDate.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        txtDate.setText("11/11/2017");
        add(txtDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(877, 201, 156, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel5.setText("Orders From Restaurant & Market");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(322, 111, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptActionPerformed
        try {
            
            Pattern p1 = Pattern.compile("^(0?[1-9]|[12][0-9]|3[01])[\\/\\-](0?[1-9]|1[012])[\\/\\-]\\d{4}$");
            Matcher m1 = p1.matcher(txtDate.getText());
            
            if (!m1.matches()) {
                JOptionPane.showMessageDialog(null, "Please enter a valid input", "Error", JOptionPane.ERROR_MESSAGE);
                txtDate.setText("");
            } else {
                int selectedRow = tblOrderList.getSelectedRow();
                
                if (selectedRow < 0) {
                    return;
                }
                
                WorkRequest request = (WorkRequest) tblOrderList.getValueAt(selectedRow, 0);
                if (request instanceof RestaurantPurchasingWorkRequest) {
                    ((RestaurantPurchasingWorkRequest) request).setDate(txtDate.getText());
                    request.setStatus(String.valueOf("Processed."));
                    populateTable();
                    
                    JOptionPane.showMessageDialog(null, "Order Processed");
                }
               
                 if (request instanceof MarketPurchasingWorkRequest) {
                    ((MarketPurchasingWorkRequest) request).setDate(txtDate.getText());
                    request.setStatus(String.valueOf("Processed."));
                    populateTable();
                    
                    JOptionPane.showMessageDialog(null, "Order Processed");
                }
            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please enter correct data");
        }
    }//GEN-LAST:event_btnAcceptActionPerformed

    private void btnRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectActionPerformed
        try {
            
            Pattern p1 = Pattern.compile("^(0?[1-9]|[12][0-9]|3[01])[\\/\\-](0?[1-9]|1[012])[\\/\\-]\\d{4}$");
            Matcher m1 = p1.matcher(txtDate.getText());
            
            if (!m1.matches()) {
                JOptionPane.showMessageDialog(null, "Please enter a valid input", "Error", JOptionPane.ERROR_MESSAGE);
                txtDate.setText("");
            } else {
                int selectedRow = tblOrderList.getSelectedRow();
                
                if (selectedRow < 0) {
                    return;
                }
                
                WorkRequest request = (WorkRequest) tblOrderList.getValueAt(selectedRow, 0);
                if (request instanceof RestaurantPurchasingWorkRequest) {
                    ((RestaurantPurchasingWorkRequest) request).setDate(txtDate.getText());
                    request.setStatus(String.valueOf("Rejected."));
                    populateTable();
                    
                    JOptionPane.showMessageDialog(null, "Order Rejected");
                }
               
                 if (request instanceof MarketPurchasingWorkRequest) {
                    ((MarketPurchasingWorkRequest) request).setDate(txtDate.getText());
                    request.setStatus(String.valueOf("Rejected."));
                    populateTable();
                    
                    JOptionPane.showMessageDialog(null, "Order Rejected");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please enter correct data");
        }
    }//GEN-LAST:event_btnRejectActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccept;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnReject;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbAdvie1;
    private javax.swing.JTable tblOrderList;
    private javax.swing.JTextField txtDate;
    // End of variables declaration//GEN-END:variables
}
